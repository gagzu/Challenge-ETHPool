{
  "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "setTeamMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x13d91d91637011800e3926273d1fe3e78ddd69ad31211e2ee9f980372b38ac4b",
  "receipt": {
    "to": null,
    "from": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",
    "contractAddress": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",
    "transactionIndex": 0,
    "gasUsed": "277253",
    "logsBloom": "0x
    "blockHash": "0x900fb08c0823ad2fbcd416bcde9dcfa3e91ef4717df21ff8afc53c3684b018d6",
    "transactionHash": "0x13d91d91637011800e3926273d1fe3e78ddd69ad31211e2ee9f980372b38ac4b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x13d91d91637011800e3926273d1fe3e78ddd69ad31211e2ee9f980372b38ac4b",
        "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000090f8bf6a479f320ead074411a4b0e7944ea8c9c1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x900fb08c0823ad2fbcd416bcde9dcfa3e91ef4717df21ff8afc53c3684b018d6"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "277253",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "71aa075dcc643c03f64ebac4c9243e10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"setTeamMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Gallbers Gallardo @gagzu\",\"custom:challenge\":\"This is a smart contract challenge\",\"details\":\"ETHPool provider a service where people can deposit ETH and they will receive weekly rewards\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setTeamMember(address)\":{\"details\":\"Add a member to the ETHPool team\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_teamMembers\":{\"details\":\"Pool management team\"}},\"title\":\"Challenge ETHPool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ETHPool.sol\":\"ETHPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ETHPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title Challenge ETHPool\\n/// @author Gallbers Gallardo @gagzu\\n/// @dev ETHPool provider a service where people can deposit ETH and they will receive weekly rewards\\n/// @custom:challenge This is a smart contract challenge\\ncontract ETHPool is Ownable {\\n\\t/// @dev General information of a user\\n\\tstruct User {\\n\\t\\tuint balanceDeposited;\\n\\t\\tuint initialdepositDate;\\n\\t\\taddress payable beneficiary;\\n\\t}\\n\\n\\t/// @dev Pool management team\\n\\tmapping (address => bool) private _teamMembers;\\n\\n\\t/*\\n\\t * Mapping para los usuarios\\n\\t * mapping (address => User) public users;\\n\\t*/\\n\\n\\tconstructor() {\\n\\t\\t_teamMembers[msg.sender] = true;\\n\\t}\\n\\n\\t/// @dev Add a member to the ETHPool team\\n\\tfunction setTeamMember(address member) public onlyOwner {\\n\\t\\trequire(member != address(0), \\\"Invalid address\\\");\\n\\t\\t_teamMembers[member] = true;\\n\\t}\\n\\n\\t/*\\n\\t * Depositar recompensa\\n\\t * function depositReward() public payable onlyTeam {}\\n\\t*/\\n\\n\\t/*\\n\\t * Modificador donde solo el equipo puede llamar a la fn\\n\\t * moifier onlyTeam { _; }\\n\\t*/\\n\\n\\treceive() external payable {}\\n\\n}\",\"keccak256\":\"0x0c98450b0ef15de246340491e3ebdd727dca9be06b582cec834c43db6244e135\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361003c565b336000908152600160208190526040909120805460ff1916909117905561008c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6103308061009b6000396000f3fe6080604052600436106100435760003560e01c80633fb5ce841461004f578063715018a6146100715780638da5cb5b14610086578063f2fde38b146100b257600080fd5b3661004a57005b600080fd5b34801561005b57600080fd5b5061006f61006a366004610295565b6100d2565b005b34801561007d57600080fd5b5061006f610174565b34801561009257600080fd5b50600054604080516001600160a01b039092168252519081900360200190f35b3480156100be57600080fd5b5061006f6100cd366004610295565b6101aa565b6000546001600160a01b031633146101055760405162461bcd60e51b81526004016100fc906102c5565b60405180910390fd5b6001600160a01b03811661014d5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064016100fc565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b6000546001600160a01b0316331461019e5760405162461bcd60e51b81526004016100fc906102c5565b6101a86000610245565b565b6000546001600160a01b031633146101d45760405162461bcd60e51b81526004016100fc906102c5565b6001600160a01b0381166102395760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100fc565b61024281610245565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156102a757600080fd5b81356001600160a01b03811681146102be57600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea264697066735822122071ae758a518e1e6d2d6d44eea87c77004456b898ecc5c3d3f61bcac334b5fac864736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100435760003560e01c80633fb5ce841461004f578063715018a6146100715780638da5cb5b14610086578063f2fde38b146100b257600080fd5b3661004a57005b600080fd5b34801561005b57600080fd5b5061006f61006a366004610295565b6100d2565b005b34801561007d57600080fd5b5061006f610174565b34801561009257600080fd5b50600054604080516001600160a01b039092168252519081900360200190f35b3480156100be57600080fd5b5061006f6100cd366004610295565b6101aa565b6000546001600160a01b031633146101055760405162461bcd60e51b81526004016100fc906102c5565b60405180910390fd5b6001600160a01b03811661014d5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064016100fc565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b6000546001600160a01b0316331461019e5760405162461bcd60e51b81526004016100fc906102c5565b6101a86000610245565b565b6000546001600160a01b031633146101d45760405162461bcd60e51b81526004016100fc906102c5565b6001600160a01b0381166102395760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100fc565b61024281610245565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156102a757600080fd5b81356001600160a01b03811681146102be57600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea264697066735822122071ae758a518e1e6d2d6d44eea87c77004456b898ecc5c3d3f61bcac334b5fac864736f6c63430008070033",
  "devdoc": {
    "author": "Gallbers Gallardo @gagzu",
    "custom:challenge": "This is a smart contract challenge",
    "details": "ETHPool provider a service where people can deposit ETH and they will receive weekly rewards",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setTeamMember(address)": {
        "details": "Add a member to the ETHPool team"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_teamMembers": {
        "details": "Pool management team"
      }
    },
    "title": "Challenge ETHPool",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ETHPool.sol:ETHPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 144,
        "contract": "contracts/ETHPool.sol:ETHPool",
        "label": "_teamMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}